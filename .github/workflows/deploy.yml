name: Deploy to Vercel (CLI only)

on:
  push:
    branches: [main]        # change si besoin
  workflow_dispatch:        # déclenchement manuel possible

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Ces deux variables sont lues par le CLI pour cibler le bon projet
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      # 1) Récupération du code
      - uses: actions/checkout@v4

      # 2) Mise en cache npm (accélère les builds)
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # 3) Installation des dépendances
      - run: npm ci

      # 4) Tests & build applicatif
      - run: npm run test:ci         # adapte si tu n’as pas de tests
      - run: npm run build

      # 5) Migrations (ex. Prisma) – retire si inutile
      - run: npx prisma migrate deploy

      # 6) Récupère les variables d’env + conf Vercel
      - name: Vercel › pull config
        run: |
          npx vercel pull \
            --yes \
            --environment=production \
            --token ${{ secrets.VERCEL_TOKEN }}

      # 7) Build Vercel en local (utilise l’artifact déjà produit)
      - name: Vercel › build
        run: npx vercel build --prod

      # 8) Déploiement de l’artifact
      - name: Vercel › deploy
        run: |
          npx vercel deploy \
            --prebuilt \
            --prod \
            --token ${{ secrets.VERCEL_TOKEN }}

    # Empêche qu’un ancien job encore en cours déploie la branche après coup
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
