generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ----------  Mod√®les Next-Auth  ----------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts    Account[]
  sessions    Session[]
  links       Link[]
  memberships Membership[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

/// ----------  Link-hub ----------
model Link {
  id        Int      @id @default(autoincrement())
  slug      String
  url       String
  clicks    Int      @default(0)
  createdAt DateTime @default(now())

  // relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, slug])
}

/// ----------  Multi-tenant ----------
enum Role {
  OWNER
  ADMIN
  USER
}

 model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  theme     Json?
  members   Membership[]
  links     Link[]
  invites   Invite[]
 }

model Membership {
  userId   String
  tenantId String
  role     Role   @default(USER)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
}

model Invite {
  id        String   @id @default(cuid())
  token     String   @unique
  role      Role     @default(USER)
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  maxUses   Int      @default(1)
  uses      Int      @default(0)
  expiresAt DateTime @default(dbgenerated("now() + interval '30 days'"))
  createdAt DateTime @default(now())
}

